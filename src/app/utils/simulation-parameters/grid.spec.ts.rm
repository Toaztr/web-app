import { FreeGrid, BridgeGrid } from './grid';
import { FormBuilder, FormGroup } from '@angular/forms';
import { TypedFormArray } from 'src/app/typed-form-array';
import { GridLevelProperties } from 'src/app/api/models';

describe('FreeGrid', () => {
  let freeGrid: FreeGrid;

  beforeEach(async () => {
    const fb = new FormBuilder();
    freeGrid = new FreeGrid(fb);
  });

  it('should create an instance', () => {
    expect(freeGrid).toBeTruthy();
  });

  it('should return FREE type', () => {
    expect(freeGrid.type).toEqual('FREE');
  });

  it('should return empty array', () => {
    expect(freeGrid.formatGrids()).toEqual([]);
  });

  it('should format the grid', () => {
    freeGrid.gridsArray.pushValue();
    const firstGrid = freeGrid.gridsArray.at(0) as FormGroup;
    (firstGrid.controls.lines as TypedFormArray).pushValue({
      duration: '200',
      yearlyRate: '1,3',
      amount: null,
      guarantyType: null,
      insuranceType: null,
      yearlyInsuranceRate: null,
      gracePeriodType: null,
      gracePeriodLength: null
    });
    const formattedGrid = freeGrid.formatGrids();
    const expectedResponse: GridLevelProperties = {
      loan_type: 'FREE',
      min_amount: undefined,
      max_amount: undefined,
      min_duration_month: 200,
      max_duration_month: 200,
      yearly_rate: 1.3,
      insurance: undefined,
      guaranty_type: null,
      grace_period: undefined,
      min_amortization: undefined,
      max_amortization: undefined
    };
    expect(formattedGrid[0]).toEqual(expectedResponse);
  });

  it('should format the amortization with max amount, grace period and yearly rate 0%', () => {
    freeGrid.gridsArray.pushValue();
    const firstGrid = freeGrid.gridsArray.at(0) as FormGroup;
    const lines: TypedFormArray = (firstGrid.controls.lines as TypedFormArray);
    lines.pushValue({
      duration: '200',
      yearlyRate: '0',
      amount: '166,30',
      guarantyType: null,
      insuranceType: null,
      gracePeriodType: 'TOTAL',
      gracePeriodLength: '120'
    });
    lines.at(0).get('gracePeriodLength').enable();
    const formattedGrid = freeGrid.formatGrids();
    const expectedResponse: GridLevelProperties = {
      loan_type: 'FREE',
      min_amount: undefined,
      max_amount: 166.3,
      min_duration_month: 200,
      max_duration_month: 200,
      yearly_rate: 0,
      insurance: undefined,
      guaranty_type: null,
      grace_period: { type: 'TOTAL', length: 120 },
      min_amortization: 2.0787500000000003,
      max_amortization: 2.0787500000000003
    };
    expect(formattedGrid[0]).toEqual(expectedResponse);
  });

  it('should format the amortization with max amount, yearly rate 0% and without grace period', () => {
    freeGrid.gridsArray.pushValue();
    const firstGrid = freeGrid.gridsArray.at(0) as FormGroup;
    const lines: TypedFormArray = (firstGrid.controls.lines as TypedFormArray);
    lines.pushValue({
      duration: '200',
      yearlyRate: '0',
      amount: '166,30',
      guarantyType: null,
      insuranceType: null,
      gracePeriodType: null,
      gracePeriodLength: null
    });
    const formattedGrid = freeGrid.formatGrids();
    const expectedResponse: GridLevelProperties = {
      loan_type: 'FREE',
      min_amount: undefined,
      max_amount: 166.3,
      min_duration_month: 200,
      max_duration_month: 200,
      yearly_rate: 0,
      insurance: undefined,
      guaranty_type: null,
      grace_period: undefined,
      min_amortization: 0.8315,
      max_amortization: 0.8315
    };
    expect(formattedGrid[0]).toEqual(expectedResponse);
  });
});


describe('BridgeGrid', () => {
  let bridgeGrid: BridgeGrid;

  beforeEach(async () => {
    const fb = new FormBuilder();
    bridgeGrid = new BridgeGrid(fb);
  });

  it('should create an instance', () => {
    expect(bridgeGrid).toBeTruthy();
  });

  it('should return FREE type', () => {
    expect(bridgeGrid.type).toEqual('BRIDGE');
  });

  it('should return empty array', () => {
    expect(bridgeGrid.formatGrids()).toEqual([]);
  });

  it('should format the grace_period automatically', () => {
    bridgeGrid.gridsArray.pushValue();
    const firstGrid = bridgeGrid.gridsArray.at(0) as FormGroup;
    const lines: TypedFormArray = (firstGrid.controls.lines as TypedFormArray);
    lines.pushValue({
      duration: '200',
      yearlyRate: '1,2',
      amount: '3000,03',
      guarantyType: null,
      insuranceType: 'INITIAL_CAPITAL',
      yearlyInsuranceRate: '3,2',
      gracePeriodType: null,
      gracePeriodLength: null
    });
    lines.at(0).get('yearlyInsuranceRate').enable();
    const formattedGrid = bridgeGrid.formatGrids();
    const expectedResponse: GridLevelProperties = {
      loan_type: 'BRIDGE',
      min_amount: 3000.03,
      max_amount: 3000.03,
      min_duration_month: 200,
      max_duration_month: 200,
      yearly_rate: 1.2,
      insurance: [{
        type: 'INITIAL_CAPITAL',
        rate: 3.2
      }],
      guaranty_type: null,
      grace_period: { type: 'PARTIAL', length: 199 },
      min_amortization: undefined,
      max_amortization: undefined
    };
    expect(formattedGrid[0]).toEqual(expectedResponse);
  });

});
