/**
 * Toaztr API
 * # Introduction  Les API **Toaztr** sont documentées au format [OpenAPI](https://www.openapis.org/). Elles sont **accessibles depuis n\'importe quel site ou serveur**, toutes les réponses incluant un header Cross-Origin Resource Sharing adapté, comme spécifié sur la [spécification W3C](https://fetch.spec.whatwg.org/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { WeightedPositiveFigure } from './weightedPositiveFigure';


/**
 * Crédit en cours au moment de la constitution du dossier. Seul les crédits de type CONTINUE_AFTER_PROJECT sont considérés dans la capacité de remboursement.
 */
export interface CurrentLoan { 
    /**
     * Type de crédit.
     */
    type: CurrentLoan.TypeEnum;
    /**
     * Futur du crédit.
     */
    future?: CurrentLoan.FutureEnum;
    monthly_payment?: WeightedPositiveFigure;
    /**
     * Crédit lissable: si le crédit est lissable, il sera intégrée au plan de financement, et les lignes du nouveau crédit seront lissées sur celui-ci.
     */
    smoothable?: boolean;
    /**
     * Capital restant dû.
     */
    remaining_capital?: number;
    /**
     * Date de début du prêt.
     */
    start_date?: string;
    /**
     * Date de fin du prêt.
     */
    end_date?: string;
    /**
     * Organisme prêteur.
     */
    lender?: string;
    /**
     * Commentaire.
     */
    comment?: string;
}
export namespace CurrentLoan {
    export type TypeEnum = 'MORTGAGE' | 'PERSONAL_LOAN' | 'SPECIFIC_LOAN' | 'REVOLVING_LOAN' | 'OTHER';
    export const TypeEnum = {
        Mortgage: 'MORTGAGE' as TypeEnum,
        PersonalLoan: 'PERSONAL_LOAN' as TypeEnum,
        SpecificLoan: 'SPECIFIC_LOAN' as TypeEnum,
        RevolvingLoan: 'REVOLVING_LOAN' as TypeEnum,
        Other: 'OTHER' as TypeEnum
    };
    export type FutureEnum = 'REIMBURSED_BEFORE_PROJECT' | 'CONTINUE_AFTER_PROJECT' | 'REIMBURSED_DURING_PROJECT' | 'CONSOLIDATED_DURING_PROJECT';
    export const FutureEnum = {
        ReimbursedBeforeProject: 'REIMBURSED_BEFORE_PROJECT' as FutureEnum,
        ContinueAfterProject: 'CONTINUE_AFTER_PROJECT' as FutureEnum,
        ReimbursedDuringProject: 'REIMBURSED_DURING_PROJECT' as FutureEnum,
        ConsolidatedDuringProject: 'CONSOLIDATED_DURING_PROJECT' as FutureEnum
    };
}


